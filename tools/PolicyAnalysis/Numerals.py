import pandas as pd
import xlwings as xw
import os
import re
from alive_progress import alive_bar
from PolicyAnalysis import cptj as cj


def num_translate(matched):
    return cj.chinese_to_arabic(matched.group())


def numerals(Data):
    infos = {
        r'1\n': (r'[0-9]+[\n]+', 5),  # 应对部分 pdf 扫描件把页码粘下来的问题
        # 一般这种页码都是后面直接换行
        r'1。': (r'[0-9]+[，。]+', 5),  # 一般数据不会不加单位直接以，。结尾
        '(1)': (r'[。？！\s；]\([0-9]+\)', 4),
        '（1）': (r'[。？！\s；]（[0-9]+）', 4),  # 标题前方不能是汉字，规避格式如：保监会令（2004）2号
        '1、': (r'[。？！\s；][0-9]+、', 4),  # 标题前面不能是括号，规避格式如：（3、4、5 等同上）
        '1.': (r'[。？！\s；][0-9]+\.[^0-9]', 1),  # 前面不能是@或 . ，以规避格式如：@163.com
        '1)': (r'[。？！\s；][0-9]+\)', 4),  # 前面不能是 0-9，以规避格式如：(12)
        '1）': (r'[。？！\s；][0-9]+）', 4),
        '(一)': (r'[。？！\s；]\([一二三四五六七八九十]+\)', 4),
        '（一）': (r'[。？！\s；]（[一二三四五六七八九十]+）', 4),
        '一、': (r'[。？！\s；][一二三四五六七八九十]+、', 4),
        '一.': (r'[。？！\s；][一二三四五六七八九十]+\.', 4),
        '一)': (r'[。？！\s；][一二三四五六七八九十]+\)', 4),
        '一）': (r'[。？！\s；][一二三四五六七八九十]+）', 4),
        '(A)': (r'[。？！\s；]\([A-Z]+\)', 4),
        '（A）': (r'[。？！\s；]（[A-Z]+）', 4),
        'A、': (r'[。？！\s；][A-Z]+、', 4),
        'A.': (r'[。？！\s；][A-Z]+\.', 4),  # 前面不能是@和 . ，以规避格式如：m@sac.net.cn
        'A)': (r'[。？！\s；][A-Z]+\)', 4),
        'A）': (r'[。？！\s；][A-Z]+）', 4),
        '(a)': (r'[。？！\s；]\([a-z]+\)', 4),
        '（a）': (r'[。？！\s；]（[a-z]+）', 4),
        'a、': (r'[。？！\s；][a-z]+、', 4),
        'a.': (r'[。？！\s；][a-z]+\.', 4),
        'a)': (r'[。？！\s；][a-z]+\)', 4),  # 前面不能是 @ 和 .
        'a）': (r'[。？！\s；][a-z]+）', 4),  # 前面不能是@ 和 . ，以规避格式如：m@sac.net.cn）
        '①': (r'[。？！\s；][⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛㉜㉝㉞㉟㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿]', 4),
        '第一节': (r'[。？！\s；]第[一二三四五六七八九]+节', 4),
        '第一章': (r'[。？！\s；]第[一二三四五六七八九]+章', 4),
        '第一条': (r'[。？！\s；]第[一二三四五六七八九]+条', 4),
        '1.1': (r'[。？！\s；][0-9]{1,2}\.[0.9]{1,2}', 4),
        '1.1.1': (r'[。？！\s；][0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}', 4),
        '1.1.1.1': (r'[。？！\s；][0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}', 4),
        '1.1.1.1.1': (r'[。？！\s；][0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}', 4),
        '2009年12月1日': (r'[0-9]{4}年[0-9]{1,2}月[0-9]{1,2}日', 0),
        '2009年': (r'[0-9]{4}年', 0),
        # 注意{1,2}中间不能有空格，这和python运算符有区别
        '12月1日': (r'[0-9]{1,2}月[0-9]{1,2}日', 0),
        'YYYY-MM-DD': (r'[0-9]{4}\-[0-9]{1, 2}\-[0-9]{1,2}', 0),
        'MM-DD': (r'[0-9]{1,2}\-[0-9]{1,2}', 0),
        'YYYY/MM/DD': (r'[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}', 0),
        'MM/DD': (r'[0-9]{1,2}/[0-9]{1,2}', 0),
        'YYYY.MM.DD': (r'[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}', 0),
        'XX号': (r'[0-9]+号', 0),
        '附件X': (r'附件[0-9]+', 0),
        '附X': (r'附[0-9]+', 0),
        '图X': (r'图[0-9]+', 0),
        '表X': (r'表[0-9]+', 0),
    }

    df = Data.copy()
    # 单独把 infos 中的正则表达式提取出来
    pop_lst = []
    for k, v in infos.items():
        pop_lst.append(v[0])

    nums = r'[。？！\s；，、\u4e00-\u9fa5][零一二三四五六七八九十百千万亿兆]+[\u4e00-\u9fa5、；;]'

    # 遍历样本数据，把标题和日期全部删去，同时完成数字的大小写转换
    with alive_bar(df.shape[0], force_tty=True, bar='blocks') as bar:
        for i in range(0, df.shape[0]):
            doc = df.iloc[i, 2]
            doc = cj.massive_pop(pop_lst, doc)
            try:
                doc = re.sub(nums, num_translate, doc)
            except:
                pass
            finally:
                df.iloc[i, 2] = doc
                bar()

    # 对于数据型的数字来说，后面应当紧跟着汉字或者标点符号
    digits = {
        'X': (r'[。？！\s；，、\u4e00-\u9fa5][0-9][\u4e00-\u9fa5、；;]', 1),
        'XX': (r'[。？！\s；，、\u4e00-\u9fa5][1-9][0-9][\u4e00-\u9fa5、；;]', 1),
        'XXX+': (r'[。？！\s；，、\u4e00-\u9fa5][1-9][0-9]{2,}[\u4e00-\u9fa5、；;]', 1),
        'XX.XX': (r'[。？！\s；，、\u4e00-\u9fa5][1-9][0-9]\.[0-9]+[\u4e00-\u9fa5、；;]', 1),
        'XXX+.XX': (r'[。？！\s；，、\u4e00-\u9fa5][1-9][0-9]{2,}\.[0-9]+[\u4e00-\u9fa5、；;]', 1),
    }

    numeral = cj.infos_docs_freq(digits, df)

    # numeral['DTM'] 得到 DTM
    # numeral['DFC'] 得到 DFC

    return numeral
