import pandas as pd
import numpy as np
from PolicyAnalysis import cptj as cj

# # 这个脚本包含两部分-标题级别数计算和标题个数计算
# # 标题个数可以通过 DFC 和 DTM 统计词频来实现
# # 标题种类则和3-被监管业务.py的统计业务种类数一致，是在词频统计的基础之上进行映射


class titles:

    def __init__(self, Data):
        """
        :param Data: 输入的样本框
        :param rules: 标题的匹配规则
        :return: DataFrame，由标题数和标题层级数组成
        """
        self.Data = Data
        self.rules = {
            '(1)': (r'[。？！\s；]\([0-9]+\)', 4),
            '（1）': (r'[。？！\s；]\（[0-9]+\）', 4),  # 标题前方不能是汉字，规避格式如：保监会令（2004）2号
            '1、': (r'[。？！\s；][0-9]+\、', 4),  # 标题前面不能是括号，规避格式如：（3、4、5 等同上）
            '1.': (r'[。？！\s；][0-9]+\.[^0-9]', 1),  # 前面不能是@或 . ，以规避格式如：@163.com
            '1)': (r'[。？！\s；][0-9]+\)', 4),  # 前面不能是 0-9，以规避格式如：(12)
            '1）': (r'[。？！\s；][0-9]+\）', 4),
            '(一)': (r'[。？！\s；]\([一二三四五六七八九十]+\)', 4),
            '（一）': (r'[。？！\s；]\（[一二三四五六七八九十]+\）', 4),
            '一、': (r'[。？！\s；][一二三四五六七八九十]+\、', 4),
            '一.': (r'[。？！\s；][一二三四五六七八九十]+\.', 4),
            '一)': (r'[。？！\s；][一二三四五六七八九十]+\)', 4),
            '一）': (r'[。？！\s；][一二三四五六七八九十]+\）', 4),
            '(A)': (r'[。？！\s；]\([A-Z]+\)', 4),
            '（A）': (r'[。？！\s；]\（[A-Z]+\）', 4),
            'A、': (r'[。？！\s；][A-Z]+\、', 4),
            'A.': (r'[。？！\s；][A-Z]+\.', 4),  # 前面不能是@和 . ，以规避格式如：m@sac.net.cn
            'A)': (r'[。？！\s；][A-Z]+\)', 4),
            'A）': (r'[。？！\s；][A-Z]+\）', 4),
            '(a)': (r'[。？！\s；]\([a-z]+\)', 4),
            '（a）': (r'[。？！\s；]\（[a-z]+\）', 4),
            'a、': (r'[。？！\s；][a-z]+\、', 4),
            'a.': (r'[。？！\s；][a-z]+\.', 4),
            'a)': (r'[。？！\s；][a-z]+\)', 4),  # 前面不能是 @ 和 .
            'a）': (r'[。？！\s；][a-z]+\）', 4),  # 前面不能是@ 和 . ，以规避格式如：m@sac.net.cn）
            '①': (r'[。？！\s；][⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛㉜㉝㉞㉟㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿]', 4),
            '第一节': (r'[。？！\s；]第[一二三四五六七八九]+节', 4),
            '第一章': (r'[。？！\s；]第[一二三四五六七八九]+章', 4),
            '第一条': (r'[。？！\s；]第[一二三四五六七八九]+条', 4),
            '1.1': (r'[。？！\s；][0-9]{1,2}\.[0.9]{1,2}', 4),
            '1.1.1': (r'[。？！\s；][0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}', 4),
            '1.1.1.1': (r'[。？！\s；][0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}', 4),
            '1.1.1.1.1': (r'[。？！\s；][0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}', 4),
        }

        data = self.Data.copy()

        result = cj.infos_docs_freq(self.rules, data)
        dtm = result['DTM']
        dfc = result['DFC']
        dfc_class = cj.dfc_sort_counter(dfc, '标题-正文分类统计.xlsx')
        dtm_sum = dtm.agg(np.sum, axis=1)
        dtm_final = pd.concat([dfc_class, dtm_sum], axis=1)
        dtm_final.columns = ['标题级别数', '标题总个数']

        self.DTM = dtm  # 正文检索获得的 Doc Term Matrix
        self.DFC = dfc  # 正文检索获得的 Doc Frequency Context
        self.DTM_final = dtm_final  # 标题个数和标题种类数
